apiVersion: kafka.strimzi.io/v1beta2
kind: Kafka
metadata:
  name: my-cluster
spec:
  kafka:
    version: 3.1.0
    replicas: 1
    listeners:
      - name: plain
        port: 9092
        type: internal
        tls: false
        authentication:
          type: oauth
          validIssuerUri: http://keycloak:8080/auth/realms/kafka-authz
          jwksEndpointUri: http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/certs
          userNameClaim: preferred_username
          checkAccessTokenType: false
          customClaimCheck: "@.typ && @.typ == 'Bearer'"

          # the next option is only available since Strimzi 0.20.0
          # remove it if using an older version of Strimzi
          maxSecondsWithoutReauthentication: 3600
    authorization:
      type: keycloak
      clientId: kafka
      tokenEndpointUri: http://keycloak:8080/auth/realms/kafka-authz/protocol/openid-connect/token
      delegateToKafkaAcls: true
      superUsers:
      - User:service-account-kafka
    logging:
      type: inline
      loggers:
        log4j.logger.io.strimzi: "TRACE"
        log4j.logger.kafka: "DEBUG"
        log4j.logger.org.apache.kafka: "DEBUG"
    config:
      offsets.topic.replication.factor: 1
      transaction.state.log.replication.factor: 1
      transaction.state.log.min.isr: 1
    storage:
      type: jbod
      volumes:
      - id: 0
        type: persistent-claim
        size: 100Gi
        deleteClaim: false
    metricsConfig:
      type: jmxPrometheusExporter
      valueFrom:
        configMapKeyRef:
          name: kafka-metrics
          key: kafka-metrics-config.yml
    livenessProbe:
      initialDelaySeconds: 3600
      timeoutSeconds: 3600
    template:
      kafkaContainer:
        env:
          - name: OAUTH_ENABLE_METRICS
            value: "true"
    #      - name: KAFKA_DEBUG
    #        value: "y"
    #      - name: DEBUG_SUSPEND_FLAG
    #        value: "y"
    #      - name: JAVA_DEBUG_PORT
    #        value: "5005"
    jmxOptions: {}

  zookeeper:
    replicas: 1
    storage:
      type: persistent-claim
      size: 100Gi
      deleteClaim: false
  entityOperator:
    topicOperator: {}
    userOperator: {}
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: kafka-metrics
  labels:
    app: strimzi
data:
  kafka-metrics-config.yml: |
    # See https://github.com/prometheus/jmx_exporter for more info about JMX Prometheus Exporter metrics
    lowercaseOutputName: true
    rules:
    # OAuth Metrics
    # WARNING: Make sure that the ordering of the attributes is the same as in MBean names
    - pattern: "strimzi.oauth<name=http_requests, context=(.+), type=(.+), host=\"(.+)\", path=\"(.+)\", outcome=(.+), error_type=(.+), status=(.+)><>(.+):"
      name: "strimzi_oauth_http_requests_$8"
      type: COUNTER
      labels:
        context: "$1"
        type: "$2"
        host: "$3"
        path: "$4"
        outcome: "$5"
        error_type: "$6"
        status: "$7"
    - pattern: "strimzi.oauth<name=http_requests, context=(.+), type=(.+), host=\"(.+)\", path=\"(.+)\", outcome=(.+), status=(.+)><>(.+):"
      name: "strimzi_oauth_http_requests_$7"
      type: COUNTER
      labels:
        context: "$1"
        type: "$2"
        host: "$3"
        path: "$4"
        outcome: "$5"
        status: "$6"
    - pattern: "strimzi.oauth<name=http_requests, context=(.+), type=(.+), host=\"(.+)\", path=\"(.+)\", outcome=(.+), error_type=(.+)><>(.+):"
      name: "strimzi_oauth_http_requests_$7"
      type: COUNTER
      labels:
        context: "$1"
        type: "$2"
        host: "$3"
        path: "$4"
        outcome: "$5"
        error_type: "$6"
    - pattern: "strimzi.oauth<name=validation_requests, context=(.+), mechanism=(.+), type=(.+), host=\"(.+)\", path=\"(.+)\", outcome=(.+), error_type=(.+)><>(.+):"
      name: "strimzi_oauth_validation_requests_$8"
      type: COUNTER
      labels:
        context: "$1"
        mechanism: "$2"
        type: "$3"
        host: "$4"
        path: "$5"
        outcome: "$6"
        error_type: "$7"
    - pattern: "strimzi.oauth<name=validation_requests, context=(.+), mechanism=(.+), type=(.+), host=\"(.+)\", path=\"(.+)\", outcome=(.+)><>(.+):"
      name: "strimzi_oauth_validation_requests_$7"
      type: COUNTER
      labels:
        context: "$1"
        mechanism: "$2"
        type: "$3"
        host: "$4"
        path: "$5"
        outcome: "$6"
    - pattern: "strimzi.oauth<name=authentication_requests, context=(.+), type=(.+), host=\"(.+)\", path=\"(.+)\", outcome=(.+), error_type=(.+)><>(.+):"
      name: "strimzi_oauth_authentication_requests_$7"
      type: COUNTER
      labels:
        context: "$1"
        type: "$2"
        host: "$3"
        path: "$4"
        outcome: "$5"
        error_type: "$6"
    - pattern: "strimzi.oauth<name=authentication_requests, context=(.+), type=(.+), host=\"(.+)\", path=\"(.+)\", outcome=(.+)><>(.+):"
      name: "strimzi_oauth_authentication_requests_$6"
      type: COUNTER
      labels:
        context: "$1"
        type: "$2"
        host: "$3"
        path: "$4"
        outcome: "$5"
    - pattern: "strimzi.oauth<name=authorization_requests, context=(.+), type=(.+), host=\"(.+)\", path=\"(.+)\", outcome=(.+), error_type=(.+)><>(.+):"
      name: "strimzi_oauth_authorization_requests_$7"
      type: COUNTER
      labels:
        context: "$1"
        type: "$2"
        host: "$3"
        path: "$4"
        outcome: "$5"
        error_type: "$6"
    - pattern: "strimzi.oauth<name=authorization_requests, context=(.+), type=(.+), host=\"(.+)\", path=\"(.+)\", outcome=(.+)><>(.+):"
      name: "strimzi_oauth_authorization_requests_$6"
      type: COUNTER
      labels:
        context: "$1"
        type: "$2"
        host: "$3"
        path: "$4"
        outcome: "$5"
    
    # Special cases and very specific rules
    - pattern: kafka.server<type=(.+), name=(.+), clientId=(.+), topic=(.+), partition=(.*)><>Value
      name: kafka_server_$1_$2
      type: GAUGE
      labels:
       clientId: "$3"
       topic: "$4"
       partition: "$5"
    - pattern: kafka.server<type=(.+), name=(.+), clientId=(.+), brokerHost=(.+), brokerPort=(.+)><>Value
      name: kafka_server_$1_$2
      type: GAUGE
      labels:
       clientId: "$3"
       broker: "$4:$5"
    - pattern: kafka.server<type=(.+), cipher=(.+), protocol=(.+), listener=(.+), networkProcessor=(.+)><>connections
      name: kafka_server_$1_connections_tls_info
      type: GAUGE
      labels:
        listener: "$2"
        networkProcessor: "$3"
        protocol: "$4"
        cipher: "$5"
    - pattern: kafka.server<type=(.+), clientSoftwareName=(.+), clientSoftwareVersion=(.+), listener=(.+), networkProcessor=(.+)><>connections
      name: kafka_server_$1_connections_software
      type: GAUGE
      labels:
        clientSoftwareName: "$2"
        clientSoftwareVersion: "$3"
        listener: "$4"
        networkProcessor: "$5"
    - pattern: "kafka.server<type=(.+), listener=(.+), networkProcessor=(.+)><>(.+):"
      name: kafka_server_$1_$4
      type: GAUGE
      labels:
       listener: "$2"
       networkProcessor: "$3"
    - pattern: kafka.server<type=(.+), listener=(.+), networkProcessor=(.+)><>(.+)
      name: kafka_server_$1_$4
      type: GAUGE
      labels:
       listener: "$2"
       networkProcessor: "$3"
    # Some percent metrics use MeanRate attribute
    # Ex) kafka.server<type=(KafkaRequestHandlerPool), name=(RequestHandlerAvgIdlePercent)><>MeanRate
    - pattern: kafka.(\w+)<type=(.+), name=(.+)Percent\w*><>MeanRate
      name: kafka_$1_$2_$3_percent
      type: GAUGE
    # Generic gauges for percents
    - pattern: kafka.(\w+)<type=(.+), name=(.+)Percent\w*><>Value
      name: kafka_$1_$2_$3_percent
      type: GAUGE
    - pattern: kafka.(\w+)<type=(.+), name=(.+)Percent\w*, (.+)=(.+)><>Value
      name: kafka_$1_$2_$3_percent
      type: GAUGE
      labels:
        "$4": "$5"
    # Generic per-second counters with 0-2 key/value pairs
    - pattern: kafka.(\w+)<type=(.+), name=(.+)PerSec\w*, (.+)=(.+), (.+)=(.+)><>Count
      name: kafka_$1_$2_$3_total
      type: COUNTER
      labels:
        "$4": "$5"
        "$6": "$7"
    - pattern: kafka.(\w+)<type=(.+), name=(.+)PerSec\w*, (.+)=(.+)><>Count
      name: kafka_$1_$2_$3_total
      type: COUNTER
      labels:
        "$4": "$5"
    - pattern: kafka.(\w+)<type=(.+), name=(.+)PerSec\w*><>Count
      name: kafka_$1_$2_$3_total
      type: COUNTER
    # Generic gauges with 0-2 key/value pairs
    - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.+), (.+)=(.+)><>Value
      name: kafka_$1_$2_$3
      type: GAUGE
      labels:
        "$4": "$5"
        "$6": "$7"
    - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.+)><>Value
      name: kafka_$1_$2_$3
      type: GAUGE
      labels:
        "$4": "$5"
    - pattern: kafka.(\w+)<type=(.+), name=(.+)><>Value
      name: kafka_$1_$2_$3
      type: GAUGE
    # Emulate Prometheus 'Summary' metrics for the exported 'Histogram's.
    # Note that these are missing the '_sum' metric!
    - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.+), (.+)=(.+)><>Count
      name: kafka_$1_$2_$3_count
      type: COUNTER
      labels:
        "$4": "$5"
        "$6": "$7"
    - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.*), (.+)=(.+)><>(\d+)thPercentile
      name: kafka_$1_$2_$3
      type: GAUGE
      labels:
        "$4": "$5"
        "$6": "$7"
        quantile: "0.$8"
    - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.+)><>Count
      name: kafka_$1_$2_$3_count
      type: COUNTER
      labels:
        "$4": "$5"
    - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.*)><>(\d+)thPercentile
      name: kafka_$1_$2_$3
      type: GAUGE
      labels:
        "$4": "$5"
        quantile: "0.$6"
    - pattern: kafka.(\w+)<type=(.+), name=(.+)><>Count
      name: kafka_$1_$2_$3_count
      type: COUNTER
    - pattern: kafka.(\w+)<type=(.+), name=(.+)><>(\d+)thPercentile
      name: kafka_$1_$2_$3
      type: GAUGE
      labels:
        quantile: "0.$4"
  zookeeper-metrics-config.yml: |
    # See https://github.com/prometheus/jmx_exporter for more info about JMX Prometheus Exporter metrics
    lowercaseOutputName: true
    rules:
    # replicated Zookeeper
    - pattern: "org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\d+)><>(\\w+)"
      name: "zookeeper_$2"
      type: GAUGE
    - pattern: "org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\d+), name1=replica.(\\d+)><>(\\w+)"
      name: "zookeeper_$3"
      type: GAUGE
      labels:
        replicaId: "$2"
    - pattern: "org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\d+), name1=replica.(\\d+), name2=(\\w+)><>(Packets\\w+)"
      name: "zookeeper_$4"
      type: COUNTER
      labels:
        replicaId: "$2"
        memberType: "$3"
    - pattern: "org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\d+), name1=replica.(\\d+), name2=(\\w+)><>(\\w+)"
      name: "zookeeper_$4"
      type: GAUGE
      labels:
        replicaId: "$2"
        memberType: "$3"
    - pattern: "org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\d+), name1=replica.(\\d+), name2=(\\w+), name3=(\\w+)><>(\\w+)"
      name: "zookeeper_$4_$5"
      type: GAUGE
      labels:
        replicaId: "$2"
        memberType: "$3"
